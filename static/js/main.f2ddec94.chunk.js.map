{"version":3,"sources":["mapContainer/GoogleMapContainer.js","charts/Chart.js","util.js","charts/ChartsContainer.js","timeController/TimeComponents.js","timeController/TimeController.js","App.js","serviceWorker.js","index.js"],"names":["GoogleMapContainer","props","onMapClick","x","y","lat","lng","event","undefined","_googleMap","point","google","maps","LatLng","heatmap","data","push","handleApiLoaded","map","console","log","createMapOptions","panControl","mapTypeControl","scrollwheel","styles","elementType","stylers","color","visibility","featureType","processPositions","positions","pos","Latitude","Longitude","weight","AirQualityLevel","getHeatmapData","airPollutionData","Object","values","concat","options","radius","opacity","gradient","state","heatmapVisible","center","zoom","this","heatMapData","style","width","height","ref","el","bootstrapURLKeys","key","process","libraries","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","heatmapLibrary","onClick","onGoogleApiLoaded","Component","Chart","type","title","xLabels","Card","className","BarChart","sortCountries","sortColumn","sortable","country","sort","a","b","labels","dataPoints","sortedCountries","entry","chartData","datasets","backgroundColor","borderColor","fontColor","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","legend","display","LineChart","lineData","label","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","v","sum","readableDate","date","split","month","day","parseInt","ChartsContainer","sumCasesOverCountries","column","allCases","reduce","formatDates","dates","dayMonth","selectedDayFound","covidData","covidDataForSelectedDay","selectedDay","formattedDays","keys","cumulativeData","sumOverCountries","railOuterStyle","position","transform","cursor","railInnerStyle","borderRadius","pointerEvents","SliderRail","getRailProps","Handle","domain","min","max","handle","id","value","percent","disabled","getHandleProps","left","WebkitTapHighlightColor","zIndex","role","aria-valuemin","aria-valuemax","aria-valuenow","boxShadow","Track","source","target","getTrackProps","Tick","tick","count","format","marginTop","textAlign","fontFamily","marginLeft","fontSize","defaultProps","d","TimeController","renderDates","ticksIndices","entries","filter","t","indexOf","idx","setState","updateDay","dayIdx","dayIndex","readable","updated","setSelectedDay","formatTickLabel","length","mode","step","onUpdate","handles","right","tracks","App","airPollutionDataForSelectedDay","airPollution","covid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2ddec94.chunk.js","sourcesContent":["/* global google */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport GoogleMapReact from 'google-map-react'\n\nclass GoogleMapContainer extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      heatmapVisible: true,\n      // center: {lat: 42.232294, lng: 13.607275},  // center of Italy\n      center: {lat: 54.5260, lng: 15.2551},  // center of Europe\n      zoom: 4\n    }\n  }\n\n  onMapClick = ({x, y, lat, lng, event}) => {\n    // console.log('this._googleMap', x, y, lat, lng, event)\n\n    if (this._googleMap !== undefined) {\n      const point = new google.maps.LatLng(lat, lng)\n      // console.log(this._googleMap)\n      this._googleMap.heatmap.data.push(point)\n    }\n  }\n\n  // toggleHeatMap = () => {\n  //   this.setState({\n  //     heatmapVisible: !this.state.heatmapVisible\n  //   },\n  //   () => {\n  //     if (this._googleMap !== undefined) {\n  //       this._googleMap.heatmap.setMap(this.state.heatmapVisible ?\n  //         this._googleMap.map_ : null)\n  //     }\n  //   })\n  // }\n\n  handleApiLoaded = (map, maps) => {\n    // use map and maps objects\n    console.log(map, maps)\n  }\n\n  createMapOptions = (maps) => {\n    const colors = {\n      labels: '#d59563',\n      water: '#17263c',\n      ground: '#242f3e',\n      park: '#6b9a76',\n      highwayLabel: '#f3d19c'\n    }\n\n    const darkMode = [\n      {elementType: 'geometry', stylers: [{color: '#212121'}]},\n      {elementType: 'labels.icon', stylers: [{visibility: 'off'}]},\n      {elementType: 'labels.text.fill', stylers: [{color: '#757575'}]},\n      {elementType: 'labels.text.stroke', stylers: [{color: '#212121'}]},\n      {featureType: \"administrative\", \"elementType\": \"geometry\", \"stylers\": [{\"color\": \"#757575\"}]},\n      {featureType: \"administrative.country\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#9e9e9e\"}]},\n      {featureType: \"administrative.locality\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#bdbdbd\"}]},\n      {featureType: \"poi\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#757575\"}]},\n      {featureType: \"poi.park\", \"elementType\": \"geometry\", \"stylers\": [{\"color\": \"#181818\"}]},\n      {featureType: \"poi.park\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#616161\"}]},\n      {featureType: \"poi.park\", \"elementType\": \"labels.text.stroke\", \"stylers\": [{\"color\": \"#1b1b1b\"}]},\n      {featureType: \"road\", \"stylers\": [ {\"visibility\": \"off\"}]},\n      {featureType: \"road\", \"elementType\": \"geometry.fill\", \"stylers\": [{\"color\": \"#2c2c2c\"}]},\n      {featureType: \"road\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#8a8a8a\"}]},\n      {featureType: \"road.arterial\", \"elementType\": \"geometry\", \"stylers\": [{\"color\": \"#373737\"}]},\n      {featureType: \"road.highway\", \"elementType\": \"geometry\", \"stylers\": [{\"color\": \"#3c3c3c\"}]},\n      {featureType: \"road.highway.controlled_access\", \"elementType\": \"geometry\", \"stylers\": [{\"color\": \"#4e4e4e\"}]},\n      {featureType: \"road.local\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#616161\"}]},\n      {featureType: \"transit\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#757575\"}]},\n      {featureType: \"water\", \"elementType\": \"geometry\", \"stylers\": [{\"color\": \"#000000\"}]},\n      {featureType: \"water\", \"elementType\": \"labels.text.fill\", \"stylers\": [{\"color\": \"#3d3d3d\"}]}\n    ]\n\n    var nightMode = [\n      {elementType: \"geometry\", stylers: [{color: colors.ground}]},\n      {elementType: \"labels.text.stroke\", stylers: [{color: colors.ground}]},\n      {elementType: \"labels.text.fill\", stylers: [{color: \"#746855\"}]},\n      {featureType: \"administrative.locality\", \"elementType\": \"labels.text.fill\", stylers: [{color: colors.labels}]},\n      {featureType: \"poi\", elementType: \"labels.text.fill\", stylers: [{color: colors.labels}]},\n      {featureType: \"poi.park\", elementType: \"geometry\", stylers: [{color: \"#263c3f\"}]},\n      {featureType: \"poi.park\", elementType: \"labels.text.fill\", stylers: [{color: \"#6b9a76\"}]},\n      {featureType: \"road\", elementType: \"geometry\", stylers: [{color: \"#38414e\"}]},\n      {featureType: \"road\", elementType: \"geometry.stroke\", stylers: [{color: \"#212a37\"}]},\n      {featureType: \"road\", elementType: \"labels.text.fill\", stylers: [{color: \"#9ca5b3\"}]},\n      {featureType: \"road.highway\", elementType: \"geometry\", stylers: [{color: \"#746855\"}]},\n      {featureType: \"road.highway\", elementType: \"geometry.stroke\", stylers: [{color: \"#1f2835\"}]},\n      {featureType: \"road.highway\", elementType: \"labels.text.fill\", stylers: [{color: \"#f3d19c\"}]},\n      {featureType: \"transit\", elementType: \"geometry\", stylers: [{color: \"#2f3948\"}]},\n      {featureType: \"transit.station\", elementType: \"labels.text.fill\", stylers: [{color: colors.labels}]},\n      {featureType: \"water\", elementType: \"geometry\", stylers: [{color: \"#17263c\"}]},\n      {featureType: \"water\", elementType: \"labels.text.fill\", stylers: [{color: \"#515c6d\"}]},\n      {featureType: \"water\", elementType: \"labels.text.stroke\", stylers: [{color: \"#17263c\"}]}\n    ]\n    return {\n      panControl: false,\n      mapTypeControl: true,\n      scrollwheel: true,\n      // styles: [{ stylers: [{ 'saturation': -100 }, { 'gamma': 0.8 }, { 'lightness': 4 }, { 'visibility': 'on' }] }]\n      styles: darkMode,\n    }\n  }\n\n  processPositions = positions => {\n    const airQualityMapping = {\n      1: 1,\n      2: 100,\n      3: 200,\n      4: 300\n    }\n    return positions.map(pos => ({\n      lat: pos.Latitude,\n      lng: pos.Longitude,\n      // weight: airQualityMapping[pos.AirQualityCategory]\n      weight: pos.AirQualityLevel\n    }))\n  }\n\n  getHeatmapData = airPollutionData => {\n    let positions = []\n    for (const values of Object.values(airPollutionData)) {\n      positions = positions.concat(values)\n    }\n    positions = this.processPositions(positions)\n\n    return {\n      positions,\n      options: { radius: 15, opacity: 0.6,\n        gradient: [\n        'rgba(0, 255, 255, 0)',\n        'rgba(0, 255, 255, 1)',\n        'rgba(0, 191, 255, 1)',\n        'rgba(0, 127, 255, 1)',\n        'rgba(0, 63, 255, 1)',\n        'rgba(0, 0, 255, 1)',\n        'rgba(0, 0, 223, 1)',\n        'rgba(0, 0, 191, 1)',\n        'rgba(0, 0, 159, 1)',\n        'rgba(0, 0, 127, 1)',\n        'rgba(63, 0, 91, 1)',\n        'rgba(127, 0, 63, 1)',\n        'rgba(191, 0, 31, 1)',\n        'rgba(255, 0, 0, 1)'\n        ]\n      }\n    }\n  }\n\n  render() {\n    const { center, zoom } = this.state\n    const heatMapData = this.getHeatmapData(this.props.airPollutionData)\n\n    return (\n      <div style={{width: '100%', height: '820px'}}>\n        <GoogleMapReact\n          ref={(el) => this._googleMap = el}\n          bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY, libraries: 'visualization'}}\n          defaultCenter={center}\n          defaultZoom={zoom}\n          yesIWantToUseGoogleMapApiInternals\n          heatmapLibrary={true}\n          heatmap={heatMapData}\n          onClick={this.onMapClick}\n          options={this.createMapOptions}\n          onGoogleApiLoaded={this.handleApiLoaded}\n          // onGoogleApiLoaded={({map, maps}) => {\n          //   console.log(points);\n          //   const heatmap = new maps.visualization.HeatmapLayer({\n          //     data: points.map(point => (\n          //       {location: new maps.LatLng(point['location'][1], point['location'][0]),\n          //       weight: point['weight']}))\n          //   });\n          //   heatmap.setMap(map);\n          // }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default GoogleMapContainer\n\nGoogleMapContainer.propTypes = {\n  airPollutionData: PropTypes.object, // air pollution data for all weeks and countries\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Card, CardContent, Typography } from '@material-ui/core'\nimport { Bar, defaults, HorizontalBar, Line } from 'react-chartjs-2'\n// import ChartDataLabels from 'chartjs-plugin-datalabels'\n\nimport './chart.scss'\n\n// Disable animating charts by default.\n// defaults.global.animation = false\n\nexport default class Chart extends Component {\n  render() {\n    const { data, type, title, xLabels, values } = this.props\n\n    return (\n      <Card className=\"card\">\n        <div className=\"card-title\">{title}</div>\n        {type === 'horizontalBar' && <BarChart data={data} />}\n        {type === 'cumulative' && <LineChart data={values} xLabels={xLabels} />}\n      </Card>\n    )\n  }\n}\n\nChart.propTypes = {\n  data: PropTypes.object, // data for a selected day\n  type: PropTypes.string,  // chart type horizontalBar|cumulative\n  title: PropTypes.string,  // title of the chart\n  xLabels: PropTypes.array,  // custom labels for the x axis\n  values: PropTypes.array,  // values for the cumulative chart\n}\n\n\nclass BarChart extends Component {\n  sortCountries = (data, sortColumn) => {\n    let sortable = []\n    for (let country in data) {\n      sortable.push([country, data[country][sortColumn]])\n    }\n    return sortable.sort((a, b) => b[1] - a[1])\n  }\n\n  render() {\n    const data = this.props.data\n    // Line chart\n    let labels = ['']\n    let dataPoints = []\n\n    if (data) {\n      const sortedCountries = this.sortCountries(data, 'confirmed')\n      labels = sortedCountries.map(entry => entry[0])\n      dataPoints = sortedCountries.map(entry => entry[1])\n    }\n\n    /**\n     * Chart Options\n     */\n    const chartData = {\n        labels,\n        datasets: [{\n          // label: \"My First dataset\",\n          backgroundColor: '#35d8d0',\n          borderColor: '#35d8d0',\n          fontColor: 'red',\n          data: dataPoints,\n          labels: {fontColor: 'rgb(25, 99, 132)'}\n        }]\n    }\n\n    const options = {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [{ticks: {beginAtZero: true}}],\n        xAxes: [{ticks: {beginAtZero: true}}],\n      },\n      legend: {display: false}\n    }\n\n    return(\n      <HorizontalBar\n        data={chartData}\n        options={options}\n        // plugins={[ChartDataLabels]}\n        width={100}\n        height={400}\n      />\n    )\n  }\n}\n\n\nclass LineChart extends Component {\n  render() {\n    const { data, xLabels } = this.props\n\n    const lineData = {\n      labels: xLabels,\n      datasets: [\n        {\n          label: 'My First dataset',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: '#35d8d0',\n          borderColor: '#35d8d0',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: '#35d8d0',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: '#35d8d0',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: data.map(v => v.sum)\n        }\n      ]\n    };\n\n\n    return(\n      <Line data={lineData} />\n    )\n  }\n}\n","/**\n * Utility functions\n */\n\n\n /**\n  * Turn date into a readable format. E.g. 2/21 becomes 21 February\n  * @param  {string} date\n  * @return {string}\n  */\nconst readableDate = date => {\n  const months = [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  const [month, day] = date.split(\"/\");\n  return `${day} ${months[parseInt(month) - 1]}`;\n}\n\nexport { readableDate }\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Chart from './Chart'\nimport { readableDate } from '../util'\n\n\nexport default class ChartsContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedDayFound: false\n    }\n  }\n\n  sumCasesOverCountries = (data, column) => {\n    let allCases = []\n    for (let country in data) {\n      allCases.push(data[country][column])\n    }\n    return allCases.reduce((a, b) => a+b, 0)\n  }\n\n  formatDates = (dates) => {\n    return dates.map(date => {\n      const [month, day, year] = date.split('/')\n      const dayMonth = `${month}/${day}`\n      return readableDate(dayMonth)\n    })\n  }\n\n  render() {\n    const { covidData, covidDataForSelectedDay, selectedDay } = this.props\n    const formattedDays = this.formatDates(Object.keys(covidData))\n    let cumulativeData = []\n\n    for (let day in covidData) {\n      if (day !== selectedDay) {\n        const sumOverCountries = this.sumCasesOverCountries(covidData[day], 'confirmed')\n        cumulativeData.push({day, sum: sumOverCountries})\n      } else {\n        break\n      }\n    }\n\n\n    return (\n      <div className=\"chart-container\">\n        <Chart data={covidDataForSelectedDay} type=\"horizontalBar\" title=\"Confirmed Cases per European Country\" />\n        <Chart data={covidDataForSelectedDay} type=\"cumulative\" title=\"Cumulative Cases in Europe\"\n               xLabels={formattedDays} values={cumulativeData}\n        />\n      </div>\n    )\n  }\n}\n\nChartsContainer.propTypes = {\n  covidData: PropTypes.object, // data for all days\n  selectedDay: PropTypes.string  // selected day to use for filtering out\n}\n","// @flow weak\n\n/**\n * Component taken from https://codesandbox.io/s/react-compound-slider-date-time-slider-23lkn\n */\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// *******************************************************\n// RAIL\n// *******************************************************\nconst railOuterStyle = {\n  position: \"absolute\",\n  width: \"100%\",\n  height: 40,\n  transform: \"translate(0%, -50%)\",\n  cursor: \"pointer\"\n  // border: \"1px solid grey\"\n};\n\nconst railInnerStyle = {\n  position: \"absolute\",\n  width: \"100%\",\n  height: 8,\n  transform: \"translate(0%, -50%)\",\n  borderRadius: 4,\n  pointerEvents: \"none\",\n  backgroundColor: \"#426361\"\n};\n\nexport function SliderRail({ getRailProps }) {\n  return (\n    <Fragment>\n      <div style={railOuterStyle} {...getRailProps()} />\n      <div style={railInnerStyle} />\n    </Fragment>\n  );\n}\n\nSliderRail.propTypes = {\n  getRailProps: PropTypes.func.isRequired\n};\n\n// *******************************************************\n// HANDLE COMPONENT\n// *******************************************************\nexport function Handle({\n  domain: [min, max],\n  handle: { id, value, percent },\n  disabled,\n  getHandleProps\n}) {\n  return (\n    <Fragment>\n      <div\n        style={{\n          left: `${percent}%`,\n          position: \"absolute\",\n          transform: \"translate(-50%, -50%)\",\n          WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\n          zIndex: 5,\n          width: 24,\n          height: 42,\n          cursor: \"pointer\",\n          // border: \"1px solid white\",\n          backgroundColor: \"none\"\n        }}\n        {...getHandleProps(id)}\n      />\n      <div\n        role=\"slider\"\n        aria-valuemin={min}\n        aria-valuemax={max}\n        aria-valuenow={value}\n        style={{\n          left: `${percent}%`,\n          position: \"absolute\",\n          transform: \"translate(-50%, -50%)\",\n          zIndex: 2,\n          width: 20,\n          height: 20,\n          borderRadius: \"50%\",\n          boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.3)\",\n          backgroundColor: disabled ? \"#666\" : \"#35d8d0\"\n        }}\n      />\n    </Fragment>\n  );\n}\n\nHandle.propTypes = {\n  domain: PropTypes.array.isRequired,\n  handle: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  getHandleProps: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nHandle.defaultProps = {\n  disabled: false\n};\n\n// *******************************************************\n// TRACK COMPONENT\n// *******************************************************\nexport function Track({ source, target, getTrackProps, disabled }) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        transform: \"translate(0%, -50%)\",\n        height: 8,\n        zIndex: 1,\n        backgroundColor: disabled ? \"#999\" : \"#35d8d0\",\n        borderRadius: 4,\n        cursor: \"pointer\",\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`\n      }}\n      {...getTrackProps()}\n    />\n  );\n}\n\nTrack.propTypes = {\n  source: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  target: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  getTrackProps: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nTrack.defaultProps = {\n  disabled: false\n};\n\n// *******************************************************\n// TICK COMPONENT\n// *******************************************************\nexport function Tick({ tick, count, format }) {\n  return (\n    <div>\n      <div\n        style={{\n          position: \"absolute\",\n          marginTop: 14,\n          width: 1,\n          height: 5,\n          backgroundColor: \"rgb(200,200,200)\",\n          left: `${tick.percent}%`\n        }}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          marginTop: 22,\n          textAlign: \"center\",\n          fontFamily: \"Arial, san-serif\",\n          marginLeft: `${-(100 / count) / 2}%`,\n          width: `${100 / count}%`,\n          left: `${tick.percent}%`,\n          color: 'white',\n          fontSize: 12\n        }}\n      >\n        {format(tick.value)}\n      </div>\n    </div>\n  );\n}\n\nTick.propTypes = {\n  tick: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  count: PropTypes.number.isRequired,\n  format: PropTypes.func.isRequired\n};\n\nTick.defaultProps = {\n  format: d => d\n};\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider'\n\nimport { SliderRail, Handle, Track, Tick } from './TimeComponents'\nimport { readableDate } from '../util'\n\nimport './time-controller.scss'\n\nexport default class TimeController extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      dates: [],\n      ticks: [],\n      min: 0,\n      max: 0,\n      updated: 0,\n      dayIndex: -1\n    }\n  }\n\n  componentDidMount() {\n    this.renderDates()\n  }\n\n  renderDates = () => {\n    let { covidData, airPollutionData } = this.props\n    covidData = Object.keys(this.props.covidData)\n\n    const dates = covidData.map(d => {\n      let [month, day] = d.split('/')\n      return `${month}/${day}`\n    })\n\n    const ticks = Object.entries(airPollutionData).filter(entry => (entry[1]['Updated'] === 'true') ? true : false)\n                                                  .map(entry => entry[0])\n    const ticksIndices = ticks.map(t => covidData.indexOf(t) >= 0 && covidData.indexOf(t))\n                              .filter(idx => idx !== false)\n\n    this.setState({ dates, ticks: ticksIndices }, () => {\n      this.updateDay([0])  // select 1st day by default\n    })\n  }\n\n  updateDay = dayIdx => {\n    dayIdx = dayIdx[0]\n    // This function is called even if the day hasn't changed,\n    // so this if statement is necessary to avoid multiple renderings\n    if (dayIdx !== this.state.dayIndex) {\n      const date = this.state.dates[dayIdx]\n      const readable = readableDate(date)\n\n      this.setState({ updated: readable, dayIndex: dayIdx }, () => {\n        const selectedDay = `${date}/20`\n        this.props.setSelectedDay(selectedDay)\n      })\n    }\n  }\n\n  formatTickLabel = tick => {\n    const date = this.state.dates[tick]\n    return readableDate(date)\n  }\n\n  render() {\n    const { min, max, updated, dates, ticks } = this.state\n\n    return (\n      <div className=\"slider-container\">\n        <div className=\"day-selected\">\n          <b>Selected day: </b> {updated}\n        </div>\n        {dates.length &&\n          <div>\n            <Slider\n              mode={1}\n              step={1}\n              domain={[0, dates.length-1]}\n              onUpdate={this.updateDay}\n              values={[0]}\n            >\n              <Rail>\n                {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\n              </Rail>\n              <Handles>\n                {({ handles, getHandleProps }) => (\n                  <div>\n                    {handles.map(handle => (\n                      <Handle\n                        key={handle.id}\n                        handle={handle}\n                        domain={[+min, +max]}\n                        getHandleProps={getHandleProps}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Handles>\n              <Tracks right={false}>\n                {({ tracks, getTrackProps }) => (\n                  <div>\n                    {tracks.map(({ id, source, target }) => (\n                      <Track\n                        key={id}\n                        source={source}\n                        target={target}\n                        getTrackProps={getTrackProps}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Tracks>\n              <Ticks values={ticks}>\n                {({ ticks }) => (\n                  <div>\n                    {ticks.map(tick => (\n                      <Tick\n                        key={tick.id}\n                        tick={tick}\n                        count={ticks.length}\n                        format={this.formatTickLabel}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Ticks>\n            </Slider>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nTimeController.propTypes = {\n  covidData: PropTypes.object, // data for all days\n  airPollutionData: PropTypes.array, // air pollution data for all countries\n  setSelectedDay: PropTypes.func  // function to update the selected day on the parent\n}\n","import React, { Component } from 'react'\n\nimport GoogleMapContainer from './mapContainer/GoogleMapContainer'\nimport ChartsContainer from './charts/ChartsContainer'\nimport TimeController from './timeController/TimeController'\nimport covid from './data/covid'\nimport airPollution from './data/air_pollution_data'\n\nimport './app.scss'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      airPollutionData: airPollution,\n      covidData: covid,\n      selectedDay: '',\n      covidDataForSelectedDay: [],\n      airPollutionDataForSelectedDay: [],\n    }\n  }\n\n  setSelectedDay = selectedDay => {\n    const { covidData, airPollutionData } = this.state\n\n    this.setState({\n      selectedDay,\n      covidDataForSelectedDay: covidData[selectedDay],\n      airPollutionDataForSelectedDay: airPollutionData[selectedDay]['Data']\n    })\n  }\n\n  render() {\n    const { airPollutionData, covidData, selectedDay, covidDataForSelectedDay, airPollutionDataForSelectedDay } = this.state\n    // console.log('all', airPollutionDataForSelectedDay)\n    // console.log('airPollutionDataForSelectedDay', airPollutionDataForSelectedDay.filter(i => i.Longitude < -50))\n    console.log('airPollutionDataForSelectedDay', airPollutionDataForSelectedDay)\n\n    return (\n      <div className=\"app\">\n        <div className=\"data-area\">\n          <div className=\"map\">\n            <GoogleMapContainer airPollutionData={airPollutionDataForSelectedDay} />\n          </div>\n          <div className=\"charts\">\n            <ChartsContainer\n              covidData={covidData}\n              covidDataForSelectedDay={covidDataForSelectedDay}\n              selectedDay={selectedDay}\n            />\n          </div>\n        </div>\n        <div className=\"time-controller\">\n          <TimeController\n            covidData={covidData}\n            airPollutionData={airPollutionData}\n            setSelectedDay={this.setSelectedDay}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}